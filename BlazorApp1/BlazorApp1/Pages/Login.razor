@page "/Login"
@using BlazorApp1.Authentication;
@using MongoDB.Bson;
@using MongoDB.Driver;
@inject NavigationManager NavManager
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<PageTitle>Login</PageTitle>

<html>
<link href="/css/stylesheet.css" rel="stylesheet" />
<body>
    <h2>Login</h2>
    <div class="container">
        <label><b>Username oder Email</b></label>
        <input type="text" @bind="model.userNameInput" placeholder="Enter Username" id="userName" name="userName" runat="server" required>

        <label><b>Passwort</b></label>
        <input type="password" @bind="model.passwordInput" placeholder="Enter Password" name="psw" required>
        
        <div class="container" style=@curCSS>
            <span>
                Your password is incorrect or this account doesn't exist. Please try again or 
                <a href="resetPwd" style="color: darkred">reset your password</a>
            </span>
        </div>

        <button type="submit" @onclick="onLoginClick" runat="server" CausesValidation="False">Sign in</button>

        <input type="checkbox" checked="checked"> Remember me
    </div>
    <div class="container" style="background-color: #121212;color:white;border-radius: 10px;">
        <span>Don't have an Account? <a href="Register">Sign up</a></span>
        <span class="psw">Forgot <a href="ResetPwd">password?</a></span>
    </div>
</body>
</html>

@code
{
    private class Model
    {
        public string userNameInput { get; set; }
        public string passwordInput { get; set; }
    }

    private Model model = new Model();

    string shownCSS = "background-color:#ffdce4; color: darkred;";
    string curCSS = "background - color:#ffdce4; color: darkred; display: none";

    private async Task onLoginClick()
    {
        var client = new MongoClient("mongodb+srv://Flo:shelly123@shelly.ikeunhp.mongodb.net/?retryWrites=true&w=majority");
        var mongodb = client.GetDatabase("BenutzerDatabase");
        var collection = mongodb.GetCollection<Benutzer>("Benutzer");

        var filter = Builders<Benutzer>.Filter.Eq("Email", model.userNameInput);

        var benutzer = collection.Find(filter).FirstOrDefault();

        if (benutzer == null || benutzer.Passwort != model.passwordInput)
        {
            curCSS = shownCSS;
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = benutzer.Email,
                Role = benutzer.Role
            });

        navManager.NavigateTo("Dashboard", true);
    }
}
