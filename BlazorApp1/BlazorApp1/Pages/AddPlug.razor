@page "/AddPlug"
@using MongoDB.Bson;
@using MongoDB.Driver;
@using System.Text.Json;
@inject NavigationManager NavManager
@inject IJSRuntime js

<PageTitle>Add Plug</PageTitle>

<html>
<link href="/css/addPlugStylesheet.css" rel="stylesheet" />
<body>

    <div class="addplugborder">
        <div class="addplug">
            <div class="header">
                <h3>Add Plug</h3>
            </div>
            <div class="add">
                <label>IP-Address</label>
                <input type="text" @bind="@ipInput" @oninput="OnIPEvent" placeholder="Enter IP-Address" id="userName" name="userName" runat="server" required>
            </div>
            <div class="add">
                <label>Name</label>
                <input type="text" @bind="@name" @oninput="OnNameEvent" placeholder="Name of Plug" id="name" name="userName" runat="server" required>
            </div>
            <button class="buttonAddPlug" type="submit" @onclick="onAddPlugClick" runat="server" CausesValidation="False">Add</button>
        </div>
    </div>
    
</body>
</html>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    Benutzer currentUser = new Benutzer();

    //get the logged in User
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationState;
            var name = authState.User.Identity.Name;

            var client = new MongoClient("mongodb+srv://Flo:shelly123@shelly.ikeunhp.mongodb.net/?retryWrites=true&w=majority");
            var mongodb = client.GetDatabase("BenutzerDatabase");
            var collection = mongodb.GetCollection<Benutzer>("Benutzer");

            var filter = Builders<Benutzer>.Filter.Eq("Email", name);

            var benutzer = collection.Find(filter).FirstOrDefault();
            if (benutzer != null)
            {
                currentUser = benutzer;

                if (currentUser.Plugs == null)
                {
                    List<Plug> plugList = new List<Plug>();
                    currentUser.Plugs = plugList;
                }
            }
        }
        catch (Exception ex)
        {
            js.InvokeVoidAsync("alert", "Somethign went Wron!" + ex.GetType().ToString() + ex.ToString());
        }
    }

    private string ipInput = "";
    private string name = "";
    private void OnIPEvent(ChangeEventArgs changeEvent)
    {
        ipInput = (string)changeEvent.Value;
    }
    private void OnNameEvent(ChangeEventArgs changeEvent)
    {
        name = (string)changeEvent.Value;
    }
    public void onAddPlugClick()
    {
        try
        {
            /*HttpClient client = new HttpClient();
            string perm=client.GetStringAsync("http://"+ipInput+"/relay/0").Result;
            Plug plug1 = JsonSerializer.Deserialize<Plug>(perm);*/

           /* Plug plug1 = new Plug();
            plug1.ip = ipInput;
            plug1.name = name;

            currentUser.Plugs.Add(plug1);*/
            Notification n = new Notification();
            n.message = name;
            currentUser.Notifications.Add(n);

            UpdateUser();

        }
        catch (Exception ex)
        {
            js.InvokeVoidAsync("alert", "Something went Wrong!"+ex.ToString());
        }
    }
    public void UpdateUser()
    {
        var client = new MongoClient("mongodb+srv://Flo:shelly123@shelly.ikeunhp.mongodb.net/?retryWrites=true&w=majority");
        var mongodb = client.GetDatabase("BenutzerDatabase");
        var collection = mongodb.GetCollection<Benutzer>("Benutzer");

        var filter = Builders<Benutzer>.Filter.Eq("Email", currentUser.Email);
        //var updater = Builders<Benutzer>.Update.Set("Plugs", currentUser.Plugs);
        var updater = Builders<Benutzer>.Update.Set("Notifications", currentUser.Notifications);

        var benutzer = collection.Find(filter).FirstOrDefault();

        collection.FindOneAndUpdate(filter, updater);
    }
}
