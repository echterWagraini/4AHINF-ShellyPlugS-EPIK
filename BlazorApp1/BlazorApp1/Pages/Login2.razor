@page "/Login2"
@using BlazorApp1.Authentication;
@using MongoDB.Driver;
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<link href="/css/stylesheet.css" rel="stylesheet" />

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN2</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" type="text" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {

    private class Model
    {
        public string UserName { get; set; }
        public string Password{ get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        /*var userAccount = userAccountService.GetByUserName(model.UserName);
         * 
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
        var customAuthStateProvider=(CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });*/


        var client = new MongoClient("mongodb+srv://Flo:shelly123@shelly.ikeunhp.mongodb.net/?retryWrites=true&w=majority");
        var mongodb = client.GetDatabase("BenutzerDatabase");
        var collection = mongodb.GetCollection<Benutzer>("Benutzer");

        var filter = Builders<Benutzer>.Filter.Eq("Email", model.UserName);

        var benutzer = collection.Find(filter).FirstOrDefault();

        if (benutzer == null || benutzer.Passwort != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = benutzer.Email,
                Role = benutzer.Role
            });
        /*if (!validLogin)
        {
            curCSS = shownCSS;
        }*/
        
        navManager.NavigateTo("Dashboard", true);
    }
}
