@page "/Dashboard"
@using System.Net;
@using JsonSerializer=System.Text.Json.JsonSerializer;
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager NavManager
@inject IJSRuntime js

<PageTitle>Dashboard</PageTitle>

<html>
<link href="/css/dashboardStylesheet.css" rel="stylesheet" />
<head>
    <meta charset="utf-8">
    <title>Shelly Plugs Dashboard</title>
    
</head>
<body>
    <AuthorizeView>
        <Authorized>
            <h1>Hello, @context.User.Identity.Name!</h1>
        </Authorized>
        <NotAuthorized>
            <h1>Not logged in!</h1>
        </NotAuthorized>
    </AuthorizeView>

    <AuthorizeView>
        <Authorized>
            <button id="addPlug" @onclick="addPlugS" runat="server">Add plug</button>

            <div class="grid-container">
                @for (int i = 0; i < anzahlPlugs; i++)
                {
                    <div class='plug-card'>
                        <h2>Plug 1</h2>
                        <p>Status: </p>
                        <p>Power Consumption:</p>
                        <button @onclick='onTurnOffClick' runat='server'>Turn Off</button>
                    </div>
                }
            </div>
        </Authorized>
    </AuthorizeView>
</body>
</html>

@code
{
    bool status = true;
    int anzahlPlugs = 0;

    public void addPlugS()
    {
        if (anzahlPlugs < 9)
        {
            anzahlPlugs++;
        }
    }

    public void onTurnOffClick()
    {
        HttpClient client = new HttpClient();
        string perm=client.GetStringAsync("http://10.10.2.134/relay/0").Result;
        Plug plug1 = JsonSerializer.Deserialize<Plug>(perm);


        if (plug1.ison)
        {
            client.PostAsync("http://10.10.2.134/relay/0?turn=off",null);
        }
        else if(!plug1.ison)
        {
            client.PostAsync("http://10.10.2.134/relay/0?turn=on",null);
        }
    }

    //Beispiel für die Verwendung der Nutzerdaten:
    /*[CascadingParameter]
    private Task<AuthenticationState> authenticationState{ get; set; }

    private async Task DisplayGreetingAlert()
    {
        var authState = await authenticationState;
        var message = $"Hello {authState.User.Identity.Name}";

        await js.InvokeVoidAsync("alert", message);
    }*/

    //Beispiel zur verwendung von Rollen in der Anzeige (in dem Fall in der Sidebar):
    /*
    <AuthorizeView Roles="Administrator"> //kann auch "Administrator,User" sein für mehrere Rollen
        <Authorized>
            //Was auch immer der Admin sehen soll (z.b. link zum Admin Terminal)
        </Authorized
    </AuthorizeView>
     */
}
