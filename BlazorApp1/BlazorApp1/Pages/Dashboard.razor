@page "/Dashboard"
@using System.Net;
@using HiveMQtt.Client.Options;
@using JsonSerializer=System.Text.Json.JsonSerializer;
@using Microsoft.AspNetCore.WebUtilities;
@using MongoDB.Driver;
@inject NavigationManager NavManager
@inject IJSRuntime js
@using HiveMQtt.Client;

<PageTitle>Dashboard</PageTitle>

<html>
<link href="/css/dashboardStylesheet.css" rel="stylesheet" />
<head>
    <meta charset="utf-8">
    <title>Shelly Plugs Dashboard</title>
    
</head>
<body>

    <AuthorizeView>
        <Authorized>
            <h1>Hello, @context.User.Identity.Name!</h1>
        </Authorized>
        <NotAuthorized>
            <h1>Not logged in!</h1>
        </NotAuthorized>
    </AuthorizeView>
<<<<<<< Updated upstream
    <!-- in dem AuthorizeView kann man keine onclick funktion mit einer lambda methode ersetzen
    <AuthorizeView>
        <Authorized>
            <div class="grid-container" style="@curCSScards">
                @if (currentUser.Plugs != null)
                {
                    @foreach (Plug p in currentUser.Plugs)
                    {
                        <div class='plug-card' @onclick="onCardClick">
                            <h2>@p.name</h2>
                            <p>Status: @p.ison.ToString()</p>
                            <p>Power Consumption:</p>
                            <p>IP: @p.ip</p>
                            <button @onclick='onTurnOffClick' runat='server'>Turn Off</button>
                        </div>
                    }
                }
            </div>
            <div style="@curCSS">
                <div @onclick="onCardClick">
                    <p>Back </p>
                </div>
                @if (currentPlug != null)
                {
                    @foreach (Plug p in currentUser.Plugs)
                    {
                        if (p.name == currentPlug.name)
                        {
                            <div class='single-plug'>
                                <h2>@p.name </h2>
                                <p>Status:</p>
                                <p>Power Consumption:</p>
                                <p>IP:</p>
                                <button @onclick='onTurnOffClick' runat='server'>Turn Off</button>
                            </div>
                        }
                    }
                }    
            </div>
            <label>@test</label>
        </Authorized>
    </AuthorizeView>
    -->
=======
   
>>>>>>> Stashed changes
    @if (currentUser != null)
    {
        <div class="grid-container" style="@curCSScards">
            @if (currentUser.Plugs != null)
            {
                @foreach (Plug p in currentUser.Plugs)
                {
                    <div class='plug-card' @onclick="@(() => onCardClick(p))">
                        <h2>@p.name</h2>
<<<<<<< Updated upstream
                        <p>Status: @p.ison.ToString()</p>
=======
>>>>>>> Stashed changes
                        <p>Power Consumption:</p>
                        <p>IP: @p.ip</p>
                        <button @onclick='onTurnOffClick' runat='server'>Turn Off</button>
                    </div>
                }
            }
        </div>
        <div style="@curCSS">
            <div @onclick="@(() => onCardClick(null))">
                <p>Back </p>
            </div>
            @if (currentPlug != null)
            {
                @foreach (Plug p in currentUser.Plugs)
                {
                    if (p.name == currentPlug.name)
                    {
                        <div class='single-plug'>
                            <h2>@p.name </h2>
                            <p>Status:</p>
                            <p>Power Consumption:</p>
                            <p>IP:</p>
                            <button @onclick='onTurnOffClick' runat='server'>Turn Off</button>
                        </div>
                    }
                }
            }
        </div>
<<<<<<< Updated upstream
        <label>@test</label>
=======
>>>>>>> Stashed changes
    }
</body>
</html>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    Benutzer currentUser = new Benutzer();
<<<<<<< Updated upstream
    String test="";
=======
>>>>>>> Stashed changes

    bool showCards = true;
    string hidingCSS = "display:none";
    string curCSS ="";
    string curCSScards = "";

    Plug currentPlug = null;

    //get the logged in User
    protected override async Task OnInitializedAsync()
    {
        curCSS = hidingCSS;
        try
        {
            var authState = await authenticationState;
            var name = authState.User.Identity.Name;

            var client = new MongoClient("mongodb+srv://Flo:shelly123@shelly.ikeunhp.mongodb.net/?retryWrites=true&w=majority");
            var mongodb = client.GetDatabase("BenutzerDatabase");
            var collection = mongodb.GetCollection<Benutzer>("Benutzer");

            var filter = Builders<Benutzer>.Filter.Eq("Email", name);

            var benutzer = collection.Find(filter).FirstOrDefault();
            if (benutzer != null)
            {
                currentUser = benutzer;

                if (currentUser.Plugs == null)
                {
                    List<Plug> plugList = new List<Plug>();
                    currentUser.Plugs = plugList;
                }
            }
        }
        catch (Exception ex)
        {
            js.InvokeVoidAsync("alert", "Somethign went Wrong!" + ex.GetType().ToString()+ex.ToString());
        }
<<<<<<< Updated upstream

        /*//set timer
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

        while (await timer.WaitForNextTickAsync())
                {
                if (currentUser.Plugs != null)
                {
                for (int i = 0; i < currentUser.Plugs.Count; i++)
                    {
                    currentUser.Plugs[i] = updatePlugData(currentUser.Plugs[i].ip);
        }
        }
        }*/
=======
>>>>>>> Stashed changes
    }


    bool status = true;

    public void onTurnOffClick()
    {
<<<<<<< Updated upstream
        HttpClient client = new HttpClient();
=======
        /*HttpClient client = new HttpClient();
>>>>>>> Stashed changes
        string perm=client.GetStringAsync("http://10.10.2.134/relay/0").Result;
        Plug plug1 = JsonSerializer.Deserialize<Plug>(perm);


<<<<<<< Updated upstream
        if (plug1.ison)
        {
            client.PostAsync("http://10.10.2.134/relay/0?turn=off",null);
        }
        else if(!plug1.ison)
        {
            client.PostAsync("http://10.10.2.134/relay/0?turn=on",null);
        }
=======
            if (plug1.ison)
            {
            client.PostAsync("http://10.10.2.134/relay/0?turn=off",null);
        }
        else if(!plug1.ison)
            {
            client.PostAsync("http://10.10.2.134/relay/0?turn=on",null);
    }*/
>>>>>>> Stashed changes
    }
    public Plug updatePlugData(string ipInput)
    {
        try
        {
<<<<<<< Updated upstream
            HttpClient client = new HttpClient();
=======
            /*HttpClient client = new HttpClient();
>>>>>>> Stashed changes
            string perm = client.GetStringAsync("http://" + ipInput + "/relay/0").Result;
            Plug plug1 = JsonSerializer.Deserialize<Plug>(perm);

            plug1.ip = ipInput;

<<<<<<< Updated upstream
            return plug1;
=======
            return plug1;*/
            return null;
>>>>>>> Stashed changes

        }
        catch (Exception ex)
        {
            js.InvokeVoidAsync("alert", "Something went Wrong!" + ex.ToString());
            return null;
        }
    }
    public void onCardClick(Plug selectedPlug)
    {
        if (showCards)
        {
            curCSScards = hidingCSS;
            curCSS = "";
            showCards = false;
            foreach(Plug p in currentUser.Plugs)
            {
                if (p == selectedPlug)
                {
                    currentPlug = selectedPlug;
                }
            }
        }
        else
        {
            curCSS = hidingCSS;
            curCSScards = "";
            showCards = true;
            currentPlug = null;
        }
    }

<<<<<<< Updated upstream
    public async void connectMQTT()
    {
        //Options
        var options = new HiveMQClientOptions();
        options.Host = "candy.x39.eu.hivemq.cloud";
        options.Port = 8883;

        // Connect
        var client = new HiveMQClient(options);
        var connectResult = await client.ConnectAsync().ConfigureAwait(false);

        // Message Handler
        client.OnMessageReceived += (sender, args) =>
        {
            Console.WriteLine("Message Received: {}", args.PublishMessage.PayloadAsString);
        };

        // Subscribe
        await client.SubscribeAsync("instrument/x9284/boston").ConfigureAwait(false);

        await client.PublishAsync(
                        "core/dynamic_graph/entity/227489", // Topic to publish to
                        "{'2023': '👍'}"                    // Message to publish
                        ).ConfigureAwait(false);
    }
=======

>>>>>>> Stashed changes
    //Beispiel für die Verwendung der Nutzerdaten:
    /*[CascadingParameter]
    private Task<AuthenticationState> authenticationState{ get; set; }

    private async Task DisplayGreetingAlert()
    {
        var authState = await authenticationState;
        var message = $"Hello {authState.User.Identity.Name}";

        await js.InvokeVoidAsync("alert", message);
    }*/

    //Beispiel zur verwendung von Rollen in der Anzeige (in dem Fall in der Sidebar):
    /*
    <AuthorizeView Roles="Administrator"> //kann auch "Administrator,User" sein für mehrere Rollen
        <Authorized>
            //Was auch immer der Admin sehen soll (z.b. link zum Admin Terminal)
        </Authorized
    </AuthorizeView>
     */
}
